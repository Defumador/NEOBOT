
BUGS:
    - warp function sometimes breaks if ship is already at full speed when it
    begins a warp. see video 2019-07-07_20-56-59 at 1h2m50s
    - it's possible for ship to be target jammed while it's moving closer to
    target its first asteroid. have ship check general tab and for jams while
    this is happening
    - ship doesn't go back to checking bookmark 1 if it fails to warp to
    bookmark 10. see video 2019-07-10_19-32-46 at 3h24m40s


IMMEDIATE FEATURES:
    - change 'print' commands to logging on collector and navigator scripts
    - add support for orca fleet hangar on collector script

POSSIBLE FEATURES:
    - have ship return to previously used belt after dropping off cargo so ship
    doesn't have to start over looking for a suitable belt
    - add support for checking if shields have been depleted while mining.
    create screenshot of the leftmost area of the instrument cluster in which the shield has been depleted
    - add support for a 'don't recall drones when escaping pcs or npcs' variable,
    which could be useful in losec space when it's necessary to quickly escape
    ships when they arrive on grid
    - randomize order miner goes to belts

LONGTERM FEATURES:
    - ocr support
    - gui logging https://github
    .com/beenje/tkinter-logging-text-widget/blob/master/main.py




multi-client support
    - each client will run on a separate thread of NEOBOT
    - NEOBOT will share control of the mouse between each client by making each threat submit inputs to an 'input queue.'
        - the mouse/keyboard will then run through the input queue and perform each action in order, regardless of which thread submitted the 'order.'
        - links about python multithreading and queues:
            blog on basig queue use -- https://www.troyfawkes.com/learn-python-multithreading-queues-basics/
            documentation on python's "queue" library -- https://pymotw.com/2/Queue/


-test situation when ship is at dest9 to see if dest checking loop works fully
-NOT READY FOR TESTING IN LOSEC YET

features:
-add support for 'icons' style inventory view
-resize session change icons to only include cyan ring on left side to give script more time to check for image
-add player-owned structures support
-GUI
-add a small chance for a semli-long wait after each jump/undock_loop for increased randomness, make sure session change
timer doesn't expire though as it would leave ship vulnerable in low-sec systems
-add image recognition for yellow-highlighted entries in people & places


multi-thread support:
    - make checks while mining multi-threaded to reduce resource usage.
        - this way, different checks can be run at different intervals. pc and npc checks can run once every 3 seconds, popup checks can be run every 2 seconds, etc.
            sample code: if a check reaches a specific condition, it locks the warpout() function and then passes a variable that kills the other thread. Each function checks the stop variable before it runs the main 'if' statement to prevent issues if both threads try to access warpout() at the same time. lock.acquire() is also used to prevent simultaneous access to warpout().
                
                in other words, if a thread reaches its target condition, it immediately attempts to kill other threads and then proceeds to lock warpout(). after warpout completes and ship has returned to site, lock is released and threads are restarted.
            """
            import threading
            import time
            stop = 0
            lock = threading.Lock()

            def shield_check():
                global stop
                for i in range(1, 15):
                    time.sleep(1)
                    print('shield_check',i)
                    if stop == 1:
                      print('shield check stopping!')
                      break
                    elif i >= 4:
                      print('shield check warping out!')
                      stop = 1
                      warpout()

            def npc_check():
                global stop
                for i in range(1, 21):
                    time.sleep(2)
                    print('npc_check',i)
                    if stop == 1:
                      print('npc_check stopping!')
                      break
                    elif i >= 2:
                      print('npc_check warping out!')
                      stop = 1
                      warpout()

            def warpout():
              lock.acquire()
              for i in range(1, 5):
                time.sleep(3)
                print('warping out!',i)
              lock.release()

            threading.Thread(target=shield_check).start()
            threading.Thread(target=npc_check).start()
            """
            
            
            multiprocessing with variable sharing between processes
            """
            import multiprocessing

            def smile_detection(thread_name, counter, lock):
                for x in range(10):
                    with lock:
                        counter.value +=1
                        print (thread_name, counter.value)  


            count = multiprocessing.Value('i',  0)
            lock = multiprocessing.Lock()
            x = multiprocessing.Process(target=smile_detection, args=("Thread1", count, lock))
            y = multiprocessing.Process(target=smile_detection, args=("Thread2", count, lock))
            x.start()
            y.start()
            x.join()
            y.join()
            """
            
            full multi-core implementation
            """
            import ctypes
            import time
            import multiprocessing
            #global stopvar
            stopvar = multiprocessing.Value('i', 0)
            lock = multiprocessing.Lock()

            def shield_check(stopvar, lock):
                #global stopvar
                for i in range(1, 15):
                    time.sleep(1)
                    print('shield_check',i)
                    #global stopvar
                    with lock:
                      stopvar.value += 1
                    print('stopvar is',stopvar)
                    #return stopvar
                    #if stopvar == 1:
                    #  print('shield check stopping!')
                    #  break
                    #elif i == 10:
                    #  print('shield check warping out!')
                    #  #lock.acquire()
                    #  stopvar = 1
                    #  warpout()


            def npc_check(stopvar, lock):
                #global stopvar
                for i in range(1, 21):
                    time.sleep(2)
                    print('npc_check',i)
                    with lock:
                      stopvar.value += 1
                    #return stopvar
                    #if stopvar == 1:
                    #  print('npc_check stopping!')
                    #  break
                    #elif i == 2:
                    #  print('npc_check warping out!')
                    #  stopvar += 1
                    #  print('npc stopvar is',stopvar)
                    #  warpout()

            def warpout():
              lock.acquire()
              for i in range(1, 5):
                time.sleep(3)
                print('warping out!',i)
              lock.release()

            a = multiprocessing.Process(target=shield_check, args=(stopvar, lock))
            b = multiprocessing.Process(target=npc_check, args=(stopvar, lock))
            a.start()
            b.start()  
            a.join()
            b.join()
            """
